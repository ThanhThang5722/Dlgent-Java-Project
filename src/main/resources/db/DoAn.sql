-- Tao Bang
CREATE TABLE "FUNCTION"(
  FUNCTION_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  FUNCTION_NAME VARCHAR2(100) UNIQUE NOT NULL
);

CREATE TABLE ROLE_GROUP (
  GROUP_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  GROUP_NAME VARCHAR2(100) UNIQUE NOT NULL,
  DESCRIPTION VARCHAR2(255),
  CREATED_AT DATE DEFAULT SYSDATE,
  IS_DELETED  NUMBER(1) DEFAULT 0 CHECK (IS_DELETED IN (0,1))
);

CREATE TABLE ROLE (
  ROLE_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  FUNCTION_ID NUMBER(10) REFERENCES FUNCTION(FUNCTION_ID),
  ADD_PERM NUMBER(1) NOT NULL,
  EDIT_PERM NUMBER(1) NOT NULL,
  DELETE_PERM NUMBER(1) NOT NULL,
  DOWNLOAD_PERM NUMBER(1) NOT NULL,
  VIEW_PERM NUMBER(1) NOT NULL,
  CREATED_AT DATE DEFAULT SYSDATE,
  IS_DELETED   NUMBER(1) DEFAULT 0 CHECK (IS_DELETED IN (0,1))
);

CREATE TABLE NGUOI_DUNG (
  USER_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  HO_TEN VARCHAR2(100) NOT NULL,
  EMAIL VARCHAR2(150) NOT NULL, -- DA BO UNIQUE 
  SDT NVARCHAR2(10) NOT NULL, -- DA BO UNIQUE
  CCCD NVARCHAR2(15) NOT NULL, -- DA BO UNIQUE
  CREATED_AT DATE DEFAULT SYSDATE,
  UPDATE_AT DATE DEFAULT SYSDATE,
  IS_DELETED   NUMBER(1) DEFAULT 0 CHECK (IS_DELETED IN (0,1))
);

CREATE TABLE TAI_KHOAN (
  ACCOUNT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  USER_ID NUMBER(10) REFERENCES NGUOI_DUNG(USER_ID),
  TEN_TAI_KHOAN NVARCHAR2(255) NOT NULL,
  MAT_KHAU NVARCHAR2(255) NOT NULL,
  TRANG_THAI VARCHAR2(20) DEFAULT 'ACTIVE' CHECK (TRANG_THAI IN('ACTIVE', 'INACTIVE')), -- 'ACTIVE' OR 'INACTIVE'
  CREATED_AT DATE DEFAULT SYSDATE,
  IS_DELETED   NUMBER(1) DEFAULT 0 CHECK (IS_DELETED IN (0,1))
);

ALTER TABLE TAI_KHOAN
ADD CONSTRAINT chk_trang_thai CHECK (TRANG_THAI IN ('ACTIVE', 'INACTIVE', 'PENDING')) FORCE;

SELECT constraint_name
FROM user_constraints
WHERE table_name = 'TAI_KHOAN' AND constraint_type = 'C';

ALTER TABLE TAI_KHOAN
DROP CONSTRAINT CHK_TRANG_THAI;

UPDATE TAI_KHOAN 
SET TRANG_THAI = 'PENDING'
WHERE ACCOUNT_ID = 1;

CREATE TABLE ACCOUNT_TOKEN (
  TOKEN_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ACCOUNT_ID NUMBER(10) REFERENCES TAI_KHOAN(ACCOUNT_ID),
  TOKEN_VALUE VARCHAR2(500) UNIQUE NOT NULL,
  EXPIRES_AT DATE NOT NULL,
  ISSUED_AT DATE,
  IS_DELETED   NUMBER(1) DEFAULT 0 CHECK (IS_DELETED IN (0,1))
);

CREATE TABLE ACCOUNT_ROLE_GROUP (
  ACCOUNT_ID NUMBER(10) REFERENCES TAI_KHOAN(ACCOUNT_ID),
  ROLE_GROUP_ID NUMBER(10) REFERENCES ROLE_GROUP(GROUP_ID),
  PRIMARY KEY (ACCOUNT_ID, ROLE_GROUP_ID)
);

CREATE TABLE ASSIGN_ROLE_GROUP (
  ROLE_GROUP_ID NUMBER(10) REFERENCES ROLE_GROUP(GROUP_ID),
  ROLE_ID NUMBER(10) REFERENCES ROLE(ROLE_ID),
  PRIMARY KEY (ROLE_GROUP_ID, ROLE_ID)
);

CREATE TABLE ACCOUNT_ASSIGN_ROLE (
  ACCOUNT_ID NUMBER(10) REFERENCES TAI_KHOAN(ACCOUNT_ID),
  ROLE_ID NUMBER(10) REFERENCES ROLE(ROLE_ID),
  PRIMARY KEY (ACCOUNT_ID, ROLE_ID)
);

CREATE TABLE KHACH_HANG (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_TAI_KHOAN NUMBER NOT NULL REFERENCES TAI_KHOAN(ACCOUNT_ID) UNIQUE,
  DIA_CHI NVARCHAR2(255),
  DIEM_TICH_LUY INT NOT NULL
);

CREATE TABLE DOI_TAC (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_TAI_KHOAN NUMBER NOT NULL REFERENCES TAI_KHOAN(ACCOUNT_ID) UNIQUE,
  DIA_CHI NVARCHAR2(255) NOT NULL,
  TAIKHOAN_NGANHANG NVARCHAR2(15) NOT NULL,
  TEN_TKNH NVARCHAR2(255) NOT NULL,
  TEN_NGANHANG NVARCHAR2(255) NOT NULL,
  SO_DU DECIMAL(12,2) DEFAULT 0 CHECK(SO_DU >= 0)
);

CREATE TABLE LICH_SU_RUT_TIEN (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_DOI_TAC NUMBER NOT NULL REFERENCES DOI_TAC(ID),
  SOTIEN DECIMAL(12,2) NOT NULL,
  THOIGIAN_TAO TIMESTAMP NOT NULL,
  THOIGIAN_RUT_TIEN TIMESTAMP NOT NULL,
  TRANGTHAI_RUTTIEN NVARCHAR2(255) NOT NULL
);

CREATE TABLE THANH_PHO (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  TEN_THANH_PHO NVARCHAR2(255) NOT NULL
);

CREATE TABLE QUAN (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_THANH_PHO NUMBER NOT NULL REFERENCES THANH_PHO(ID),
  TEN_QUAN NVARCHAR2(255) NOT NULL
);

CREATE TABLE PHUONG (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_QUAN NUMBER NOT NULL REFERENCES QUAN(ID),
  TEN_PHUONG NVARCHAR2(255) NOT NULL
);

CREATE TABLE KHU_NGHI_DUONG (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_DOI_TAC NUMBER NOT NULL REFERENCES DOI_TAC(ID),
  TEN NVARCHAR2(255) NOT NULL,
  DIA_CHI NVARCHAR2(255) NOT NULL,
  PHUONG_ID NUMBER NOT NULL REFERENCES PHUONG(ID),
  IMG_360_URL NVARCHAR2(255),
  DANH_GIA INT DEFAULT 0 NOT NULL,
);



ALTER TABLE KHU_NGHI_DUONG
MODIFY IMG_360_URL NVARCHAR2(255) NULL;

ALTER TABLE KHU_NGHI_DUONG
MODIFY DANH_GIA INT DEFAULT 0 NOT NULL;


CREATE TABLE HINH_KHU_NGHI_DUONG (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_KHU_NGHI_DUONG NUMBER NOT NULL REFERENCES KHU_NGHI_DUONG(ID),
  URL NVARCHAR2(255) NOT NULL
);

CREATE TABLE DANH_GIA (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_KHU_NGHI_DUONG NUMBER NOT NULL REFERENCES KHU_NGHI_DUONG(ID),
  ID_KHACH_HANG NUMBER NOT NULL REFERENCES KHACH_HANG(ID),
  DIEM INT NOT NULL,
  NOI_DUNG NVARCHAR2(1000),
  THOIGIAN_TAO TIMESTAMP NOT NULL
);


CREATE TABLE LOAI_PHONG (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_KHU_NGHI_DUONG NUMBER FOREIGN KEY REFERENCES DOI_TAC(ID),
  TEN_LOAI_PHONG NVARCHAR2(255) NOT NULL,
  DIEN_TICH FLOAT NOT NULL,
  LOAI_PHONG_THEO_SO_LUONG NVARCHAR2(255) NOT NULL,
  LOAI_PHONG_THEO_TIEU_CHUAN NVARCHAR2(255) NOT NULL,
  SO_GIUONG INT NOT NULL,
  SO_NGUOI INT NOT NULL,
  GIA DECIMAL(12,2) NOT NULL
);

CREATE TABLE HINH_PHONG (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_LOAI_PHONG NUMBER NOT NULL REFERENCES LOAI_PHONG(ID),
  URL NVARCHAR2(255) NOT NULL
  IS_DELETED   NUMBER(1) DEFAULT 0 CHECK (IS_DELETED IN (0,1))
);

CREATE TABLE TIEN_ICH (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  LOAI_TIEN_ICH NVARCHAR2(255) NOT NULL,
  ICON_URL NVARCHAR2(255) NOT NULL
);

CREATE TABLE PHONG (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_KHU_NGHI_DUONG NUMBER NOT NULL REFERENCES KHU_NGHI_DUONG(ID),
  ID_LOAI_PHONG NUMBER NOT NULL REFERENCES LOAI_PHONG(ID),
  MA_SO INT
  TINH_TRANG NVARCHAR2(255) NOT NULL
);

CREATE TABLE PHONG (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_NHA NUMBER NOT NULL REFERENCES NHA(ID),
  ID_LOAI_PHONG NUMBER NOT NULL REFERENCES LOAI_PHONG(ID),
  TINH_TRANG NVARCHAR2(255) NOT NULL
);

CREATE TABLE THOIGIAN_PHONG_BAN (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_PHONG NUMBER NOT NULL REFERENCES PHONG(ID),
  NGAY_BAT_DAU TIMESTAMP NOT NULL,
  NGAY_KET_THUC TIMESTAMP NOT NULL,
  ID_KHACH_HANG NUMBER NOT NULL REFERENCES KHACH_HANG(ID)
);

CREATE TABLE DICH_VU (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  TEN_DICH_VU NVARCHAR2(255) NOT NULL
);

CREATE TABLE DICH_VU_KHU_NGHI_DUONG (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_DICH_VU NUMBER NOT NULL REFERENCES DICH_VU(ID),
  ID_RESORT NUMBER NOT NULL REFERENCES KHU_NGHI_DUONG(ID),
  GIA DECIMAL(12,2) NOT NULL
);

CREATE TABLE GOI_DAT_PHONG (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_LOAI_PHONG NUMBER NOT NULL REFERENCES LOAI_PHONG(ID),
  TONG_GIATIEN DECIMAL(12,2) NOT NULL
);

CREATE TABLE DICH_VU_MAC_DINH (
  ID_DICH_VU_KHU_NGHI_DUONG NUMBER NOT NULL REFERENCES DICH_VU_KHU_NGHI_DUONG(ID),
  ID_GOI_DAT_PHONG NUMBER NOT NULL REFERENCES GOI_DAT_PHONG(ID),
  GIAMGIA DECIMAL(12,2) NOT NULL,
  PRIMARY KEY (ID_DICH_VU_KHU_NGHI_DUONG, ID_GOI_DAT_PHONG)
);

CREATE TABLE DAT_PHONG (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_KHACH_HANG NUMBER NOT NULL REFERENCES KHACH_HANG(ID),
  THOI_GIAN_TAO TIMESTAMP NOT NULL,
  TINH_TRANG NVARCHAR2(255) NOT NULL,
  TONG_GIATIEN DECIMAL(12,2) NOT NULL,
  TAIKHOAN_NGANHANG NVARCHAR2(15) NOT NULL,
  TEN_TKNH NVARCHAR2(255) NOT NULL,
  TEN_NGANHANG NVARCHAR2(255) NOT NULL
);

CREATE TABLE GIAMGIA (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_LOAI_PHONG NUMBER NOT NULL REFERENCES LOAI_PHONG(ID),
  LOAI_GIAMGIA NVARCHAR2(255) NOT NULL,
  GIA_TRI DECIMAL(12,2) NOT NULL,
  MUC_TOI_DA DECIMAL(12,2),
  NGAY_BAT_DAU TIMESTAMP NOT NULL,
  NGAY_KET_THUC TIMESTAMP NOT NULL,
  TINH_TRANG NVARCHAR2(255) NOT NULL
);

CREATE TABLE CHI_TIET_DAT_PHONG (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_DAT_PHONG NUMBER NOT NULL REFERENCES DAT_PHONG(ID),
  ID_GOI_DAT_PHONG NUMBER NOT NULL REFERENCES GOI_DAT_PHONG(ID),
  ID_GIAMGIA NUMBER NOT NULL REFERENCES GIAMGIA(ID),
  SO_LUONG_PHONG INT NOT NULL,
  SO_LUONG_DICH_VU_YEU_CAU INT NOT NULL,
  TONG_GIATIEN DECIMAL(12,2) NOT NULL,
  NGAY_BAT_DAU TIMESTAMP NOT NULL,
  NGAY_KET_THUC TIMESTAMP NOT NULL,
  TINH_TRANG NVARCHAR2(255) NOT NULL
);

CREATE TABLE DICH_VU_YEU_CAU (
  ID_DICH_VU_KHU_NGHI_DUONG NUMBER NOT NULL REFERENCES DICH_VU_KHU_NGHI_DUONG(ID),
  ID_CHI_TIET_DAT_PHONG NUMBER NOT NULL REFERENCES CHI_TIET_DAT_PHONG(ID),
  PRIMARY KEY (ID_DICH_VU_KHU_NGHI_DUONG, ID_CHI_TIET_DAT_PHONG)
);

CREATE TABLE KHO_MA_GIAM_GIA (
  ID_KHACH_HANG NUMBER NOT NULL REFERENCES KHACH_HANG(ID),
  ID_GIAMGIA NUMBER NOT NULL REFERENCES GIAMGIA(ID),
  PRIMARY KEY (ID_KHACH_HANG, ID_GIAMGIA)
);

CREATE TABLE HOA_DON (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_KHACH_HANG NUMBER NOT NULL REFERENCES KHACH_HANG(ID),
  ID_DOI_TAC NUMBER NOT NULL REFERENCES DOI_TAC(ID),
  ID_CHI_TIET_DAT_PHONG NUMBER NOT NULL REFERENCES CHI_TIET_DAT_PHONG(ID),
  TONG_GIATIEN DECIMAL(12,2) NOT NULL,
  THOIGIAN_THANHTOAN TIMESTAMP NOT NULL,
  HINH_THUC_THANH_TOAN NVARCHAR2(255) NOT NULL
);

CREATE TABLE DOI_DIEM (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  ID_MAGIAM NUMBER NOT NULL REFERENCES GIAMGIA(ID),
  GIA_TRI INT
);

-- 
-- Xóa các b?ng liên quan d?n b?ng tài kho?n và ngu?i dùng
DROP TABLE ACCOUNT_ASSIGN_ROLE;
DROP TABLE ACCOUNT_ROLE_GROUP;
DROP TABLE ACCOUNT_TOKEN;
DROP TABLE TAI_KHOAN;

-- Xóa các b?ng liên quan d?n vai trò
DROP TABLE ASSIGN_ROLE_GROUP;
SELECT * FROM ROLE;
DROP TABLE ROLE;
DROP TABLE ROLE_GROUP;
DROP TABLE FUNCTION;
COMMIT;

-- Xóa b?ng liên quan d?n d?i tác, khách hàng và các d? li?u liên quan
DROP TABLE LICH_SU_RUT_TIEN;
DROP TABLE KHACH_HANG;
DROP TABLE DOI_TAC;

-- Xóa b?ng khu ngh? du?ng và các b?ng liên quan
DROP TABLE HINH_KHU_NGHI_DUONG;
DROP TABLE KHU_NGHI_DUONG;
DROP TABLE DANH_GIA;
DROP TABLE NHA;
DROP TABLE LOAI_PHONG;
DROP TABLE HINH_PHONG;

-- Xóa các b?ng ti?n ích
DROP TABLE TIEN_ICH_PHONG;
DROP TABLE TIEN_ICH;
DROP TABLE DICH_VU_KHU_NGHI_DUONG;
DROP TABLE DICH_VU_MAC_DINH;
DROP TABLE DICH_VU_YEU_CAU;
DROP TABLE DICH_VU;

-- Xóa các b?ng d?t phòng và gi?m giá
DROP TABLE GOI_DAT_PHONG;
DROP TABLE GIAMGIA;
DROP TABLE CHI_TIET_DAT_PHONG;
DROP TABLE DAT_PHONG;
DROP TABLE KHO_MA_GIAM_GIA;
DROP TABLE HOA_DON;

-- Xóa các b?ng liên quan d?n phòng và th?i gian phòng bán
DROP TABLE THOIGIAN_PHONG_BAN;
DROP TABLE PHONG;

-- Xóa b?ng gi?m di?m
DROP TABLE DOI_DIEM;

-- Cu?i cùng xóa các b?ng chính
DROP TABLE NGUOI_DUNG;
DROP TABLE THANH_PHO;
DROP TABLE QUAN;
DROP TABLE PHUONG;


CREATE OR REPLACE FUNCTION haveRole(accountId IN NUMBER, roleGroupName IN VARCHAR2) 
RETURN number
IS
    v_role_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_role_count
    FROM ACCOUNT_ROLE_GROUP ar
    JOIN ROLE_GROUP rg ON ar.ROLE_GROUP_ID = rg.GROUP_ID
    WHERE ar.ACCOUNT_ID = accountId
    AND rg.GROUP_NAME = roleGroupName;

    IF v_role_count > 0 THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END haveRole;
/


CREATE OR REPLACE FUNCTION get_username_from_token (p_token IN VARCHAR2) 
RETURN NVARCHAR2
IS
    v_username VARCHAR2(100);
BEGIN
    v_username := SUBSTR(p_token, 1, INSTR(p_token, '_') - 1);
    RETURN v_username;
END;
/

CREATE OR REPLACE PROCEDURE ThemKhuNghiDuong(
    P_TOKEN NVARCHAR2,
    p_ten NVARCHAR2,
    p_dia_chi NVARCHAR2,
    p_thanh_pho NVARCHAR2,
    p_quan NVARCHAR2,
    p_phuong NVARCHAR2
) AS
    V_USERNAME NVARCHAR2(255);
    V_ID_THANH_PHO NUMBER;
    V_ID_QUAN NUMBER;
    V_ID_PHUONG NUMBER;
    V_ID_DOI_TAC NUMBER;
BEGIN
    V_USERNAME := get_username_from_token(P_TOKEN);
    

    SELECT DT.ID INTO V_ID_DOI_TAC
    FROM DOI_TAC dt
    JOIN TAI_KHOAN tk ON DT.ID_TAI_KHOAN = TK.ACCOUNT_ID
    WHERE TK.TEN_TAI_KHOAN = V_USERNAME;

    SELECT TP.ID INTO V_ID_THANH_PHO
    FROM THANH_PHO tp
    WHERE TP.TEN_THANH_PHO = P_THANH_PHO;

    SELECT Q.ID INTO V_ID_QUAN
    FROM QUAN q
    WHERE Q.ID_THANH_PHO = V_ID_THANH_PHO
    AND Q.TEN_QUAN = P_QUAN;

    SELECT P.ID INTO V_ID_PHUONG
    FROM PHUONG P
    WHERE P.ID_QUAN = V_ID_QUAN
    AND P.TEN_PHUONG = P_PHUONG; 

    INSERT INTO KHU_NGHI_DUONG (ID_DOI_TAC,TEN, DIA_CHI, PHUONG_ID) -- Can them khoa ngoai cua doi tac
    VALUES (V_ID_DOI_TAC,p_ten, p_dia_chi, V_ID_PHUONG);

    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE ThemKhuNghiDuong(
    P_TOKEN NVARCHAR2,
    p_ten NVARCHAR2,
    p_dia_chi NVARCHAR2,
    p_thanh_pho NVARCHAR2,
    p_quan NVARCHAR2,
    p_phuong NVARCHAR2
) AS
    V_USERNAME NVARCHAR2(255);
    V_ID_THANH_PHO NUMBER;
    V_ID_QUAN NUMBER;
    V_ID_PHUONG NUMBER;
    V_ID_DOI_TAC NUMBER;
BEGIN
    -- L?y username t? token
    V_USERNAME := get_username_from_token(P_TOKEN);
    IF V_USERNAME IS NULL THEN
        RAISE_APPLICATION_ERROR(-20001, 'Không tìm th?y username t? token.');
    END IF;

    -- L?y ID d?i tác t? username
    BEGIN
        SELECT DT.ID INTO V_ID_DOI_TAC
        FROM DOI_TAC dt
        JOIN TAI_KHOAN tk ON DT.ID_TAI_KHOAN = TK.ACCOUNT_ID
        WHERE TK.TEN_TAI_KHOAN = V_USERNAME;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20002, 'Không tìm th?y d?i tác v?i username: ' || V_USERNAME);
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20003, 'L?i khi truy v?n ID d?i tác: ' || SQLERRM);
    END;

    -- L?y ID thành ph? t? tên thành ph?
    BEGIN
        SELECT TP.ID INTO V_ID_THANH_PHO
        FROM THANH_PHO tp
        WHERE TP.TEN_THANH_PHO = P_THANH_PHO;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20004, 'Không tìm th?y thành ph? v?i tên: ' || P_THANH_PHO);
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20005, 'L?i khi truy v?n ID thành ph?: ' || SQLERRM);
    END;

    -- L?y ID qu?n t? tên qu?n và thành ph?
    BEGIN
        SELECT Q.ID INTO V_ID_QUAN
        FROM QUAN q
        WHERE Q.ID_THANH_PHO = V_ID_THANH_PHO
        AND Q.TEN_QUAN = P_QUAN;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20006, 'Không tìm th?y qu?n: ' || P_QUAN || ' ? thành ph?: ' || P_THANH_PHO);
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20007, 'L?i khi truy v?n ID qu?n: ' || SQLERRM);
    END;

    -- L?y ID phu?ng t? tên phu?ng và qu?n
    BEGIN
        SELECT P.ID INTO V_ID_PHUONG
        FROM PHUONG P
        WHERE P.ID_QUAN = V_ID_QUAN
        AND P.TEN_PHUONG = P_PHUONG;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20008, 'Không tìm th?y phu?ng: ' || P_PHUONG || ' ? qu?n: ' || P_QUAN);
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20009, 'L?i khi truy v?n ID phu?ng: ' || SQLERRM);
    END;

    -- Th?c hi?n insert vào b?ng KHU_NGHI_DUONG
    BEGIN
        INSERT INTO KHU_NGHI_DUONG (ID_DOI_TAC, TEN, DIA_CHI, PHUONG_ID)
        VALUES (V_ID_DOI_TAC, p_ten, p_dia_chi, V_ID_PHUONG);
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010, 'L?i khi th?c hi?n insert vào b?ng KHU_NGHI_DUONG: ' || SQLERRM);
    END;

    -- Commit transaction
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20011, 'L?i không xác d?nh: ' || SQLERRM);
END;
/